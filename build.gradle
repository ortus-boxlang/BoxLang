import java.text.SimpleDateFormat
import java.util.Date
// Shadowing Test Sources and Dependencies
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

// https://docs.gradle.org/current/userguide/building_java_projects.html#sec:java_packaging
plugins {
    id "java"
    // Apply the application plugin to add support for building a CLI application in Java.
	// This produces the distributions and scripts for any OS
	id "application"
	id 'antlr'
	// For source code formatting
	id "com.diffplug.spotless" version "6.25.0"
	// For building shadow jars
    id 'com.github.johnrengelman.shadow' version '8.1.1'
	// For dependency updates
	id 'com.github.ben-manes.versions' version '0.51.0'
	// For building service loader files
    id "com.github.harbby.gradle.serviceloader" version "1.1.8"
}

/**
 * Project Properties
 */
group = 'ortus.boxlang'

/**
 * ANTLR Properties
 */
def antlrGeneratedParserPackage = "ortus.boxlang.parser.antlr"
def generatedSrcDir = "build/generated-src"
def antlrGeneratedParserBaseDir = "$generatedSrcDir/antlr/main"
def antlrGeneratedParserPackageDir = antlrGeneratedParserPackage.replaceAll("\\.", "/")
def antlrGrammarDir = "src/main/antlr"

java {
	// See: https://docs.gradle.org/current/userguide/toolchains.html#toolchains
    toolchain {
        languageVersion = JavaLanguageVersion.of( project.properties[ "jdkVersion" ] )
    }
	withJavadocJar()
}

sourceSets {
    main {
		java {
			// Normal java sources + Antlr generated sources
			srcDirs += [ "$antlrGeneratedParserBaseDir" ]
		}
        resources {
            srcDirs = [ 'src/main/resources' ]
            include '**/*.properties'
			include '**/*.class'
			include '**/*.jar'
            include '**/*.json'
			include '**/*.bx*'
			include '**/*.cf*'
            include '**/META-INF/services/*'
        }
    }
}

/**
 * Repositories for dependencies in order
 */
repositories {
    mavenLocal()
	mavenCentral()
}

/**
 * Project Dependencies
 */
dependencies {
    // Testing Dependencies
    testImplementation "org.junit.jupiter:junit-jupiter:5.+"
	testImplementation "org.mockito:mockito-core:5.+"
	testImplementation "com.google.truth:truth:1.+"
	testImplementation "commons-cli:commons-cli:1.6.0"
	// https://wiremock.org/
	testImplementation "org.wiremock:wiremock:3.4.1"

	// Antlr
	antlr "org.antlr:antlr4:$antlrVersion"

	// Implementation Dependencies
	// https://mvnrepository.com/artifact/commons-io/commons-io
	implementation "commons-io:commons-io:2.15.1"
	// https://mvnrepository.com/artifact/com.github.javaparser/javaparser-symbol-solver-core
	implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.25.8'
	// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
	implementation 'org.apache.commons:commons-lang3:3.14.0'
	// https://mvnrepository.com/artifact/com.fasterxml.jackson.jr/jackson-jr-objects
	implementation 'com.fasterxml.jackson.jr:jackson-jr-objects:2.17.0'
	// https://mvnrepository.com/artifact/com.fasterxml.jackson.jr/jackson-jr-stree
	implementation 'com.fasterxml.jackson.jr:jackson-jr-stree:2.17.0'
	// https://mvnrepository.com/artifact/com.fasterxml.jackson.jr/jackson-jr-annotation-support
	implementation 'com.fasterxml.jackson.jr:jackson-jr-annotation-support:2.16.1'
	// https://mvnrepository.com/artifact/org.slf4j/slf4j-api
	implementation 'org.slf4j:slf4j-api:2.0.12'
	// https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
	implementation 'ch.qos.logback:logback-classic:1.5.2'
	// https://mvnrepository.com/artifact/org.ow2.asm/asm
	implementation 'org.ow2.asm:asm:9.7'


	// MOVE TO BOXLANG WEB PROJECT
	// https://mvnrepository.com/artifact/io.undertow/undertow-core/2.3.10.Final
	implementation 'io.undertow:undertow-core:2.3.10.Final'

	// MOVE TO DERBY JDBC MODULE
	// https://mvnrepository.com/artifact/org.apache.derby/derby
	testImplementation 'org.apache.derby:derby:10.16.1.1'

	// MOVE TO GENERIC JDBC MODULE
	// https://mvnrepository.com/artifact/com.zaxxer/HikariCP
	implementation 'com.zaxxer:HikariCP:5.1.0'
}

/**
 * Project Wide Helper function
 * This is not a task, but a reusable UDF
 */
project.ext.bumpVersion = { boolean major = false, boolean minor = false, boolean patch = false ->

	def propertiesFile = file( '../gradle.properties' );
	def properties = new Properties();

	properties.load( propertiesFile.newDataInputStream() )
	def versionTarget = major ? 0 : minor ? 1 : 2

	def currentVersion = properties.getProperty( 'version' )
	def versionParts = currentVersion.split( '\\.' )
	def newPathVersion = versionParts[ versionTarget ].toInteger() + 1
	def newVersion = '';

	if( patch ){
		newVersion = "${versionParts[ 0 ]}.${versionParts[ 1 ]}.${newPathVersion}"
	} else if( minor ){
		newVersion = "${versionParts[ 0 ]}.${newPathVersion}.${versionParts[ 2 ]}"
	} else if( major ){
		newVersion = "${newPathVersion}.${versionParts[ 1 ]}.${versionParts[ 2 ]}"
	}

	properties.setProperty( 'version', newVersion )
	properties.store( propertiesFile.newWriter(), null )

	println "Bumped version from ${currentVersion} to ${newVersion}"
}

/**
 * Application Build
 * https://docs.gradle.org/current/userguide/application_plugin.html
 */
application {
	// We use full because it's not shadowed. It can be used for debugging or other packaging purposes
    applicationName = "boxlang"
    mainClass = "ortus.boxlang.runtime.BoxRunner"
}

/**
 * Jar and Shadow Jar config
 * https://imperceptiblethoughts.com/shadow/configuration/
 */
jar {
    archiveBaseName = 'boxlang'
    archiveVersion =  "${version}"
	/**
	 *  The manifest for the shadowJar task is configured to inherit from the manifest of the standard jar task.
	 */
 	manifest {
       attributes 'Main-Class': 'ortus.boxlang.runtime.BoxRunner'
	   attributes 'Description': 'This is the Ortus BoxLang OS Distribution'
    }
}
shadowJar {
	archiveBaseName = "boxlang"
    mergeServiceFiles()
	exclude "com/ibm/icu/**"
}
task shadowJarWebServer( type: ShadowJar ) {
  	archiveClassifier.set( "web" )
	from sourceSets.main.output
	configurations = [ project.configurations.runtimeClasspath ]
	mergeServiceFiles()
	exclude "com/ibm/icu/**"
  	manifest {
		attributes 'Main-Class': 'ortus.boxlang.web.Server'
		attributes 'Description': 'This is the Ortus BoxLang Webserver'
	}
}
shadowJar.finalizedBy( shadowJarWebServer )

/**
 * Docs are here:
 * - https://github.com/harbby/gradle-serviceloader,
 * - https://plugins.gradle.org/plugin/com.github.harbby.gradle.serviceloader
 * This generates the META-INF/services files for the ServiceLoader as part of the `build` task
 */
serviceLoader {
    serviceInterface 'ortus.boxlang.runtime.bifs.BIF'
    serviceInterface 'ortus.boxlang.runtime.components.Component'
    serviceInterface 'ortus.boxlang.runtime.async.tasks.IScheduler'
    serviceInterface 'ortus.boxlang.runtime.cache.providers.ICacheProvider'
	serviceInterface 'ortus.boxlang.runtime.events.IInterceptor'
}

/**
 * Builds out the BoxLang Docs
 */
javadoc {
	options.addBooleanOption( "Xdoclint:none", true )
	exclude '**/boxlang/parser/**'
	options.addBooleanOption( 'html5', true )
}
task zipJavadocs( type: Zip ) {
	group "documentation"
	from javadoc.destinationDir
	archiveFileName = "boxlang-javadocs-${version}.zip"
	destinationDirectory = file( "$buildDir/distributions" )
	// Output that the docs have been zippped
	doLast {
		println "+ Javadocs have been zipped to the distribution folder"
	}
}
javadoc.finalizedBy( zipJavadocs )

/**
 * Compile Java Customizations
 */
compileJava {
	source sourceSets.main.java

	// Compiler Options
	options.incremental = true
	options.release = Integer.parseInt( project.properties[ "jdkVersion" ] )
	options.encoding = 'UTF-8'
	options.debug()

	// Generate the ANTLR parser before compiling
	dependsOn generateGrammarSource, generateTestGrammarSource
}
/**
 * Compile the test module for the tests to run
 */
task compileTestModule( type: JavaCompile ) {
    source = files( [ './modules/test' ] ).asFileTree
    destinationDir = file( './modules/test' )
    classpath = files( [ sourceSets.main.compileClasspath, sourceSets.main.output ] )
}
compileJava.finalizedBy( compileTestModule )

/**
 * Compile Test Java Customizations
 * To generate the ANTLR parser before compiling
 */
compileTestJava {
	source sourceSets.test.java
	dependsOn compileJava, generateTestGrammarSource, serviceLoaderBuild
	options.encoding = 'UTF-8'
}

/**
 * ANTLR Generated Source
 */
generateGrammarSource {
	inputs.files fileTree( antlrGrammarDir ).include( '*.g4' )
	maxHeapSize = "256m"
	arguments += [ '-package', antlrGeneratedParserPackage ]
	arguments += [ '-listener', '-visitor' ]
	outputDirectory = file( "$projectDir/$antlrGeneratedParserBaseDir/$antlrGeneratedParserPackageDir" )
}

/**
 * ANTLR Generated Test Sources
 */
generateTestGrammarSource {
	inputs.files fileTree( antlrGrammarDir ).include( '*.g4' )
	maxHeapSize = "256m"
	arguments += [ '-package', antlrGeneratedParserPackage ]
	arguments += [ '-listener', '-visitor' ]
	outputDirectory = file( "$projectDir/$antlrGeneratedParserBaseDir/$antlrGeneratedParserPackageDir" )
}

/**
 * Custom task: clean the ANTLR generated sources
 */
clean {
	// Clean the ANTLR generated sources
	delete generatedSrcDir
}

/**
 * Source Code Formatting
 */
spotless {
    java {
		target fileTree( "." ) {
            include "**/*.java"
            exclude "**/build/**", "bin/**", "examples/**", "src/main/java/ortus/boxlang/runtime/testing/**"
        }
        eclipse().configFile( "workbench/ortus-java-style.xml" )
		toggleOffOn()
    }
}
spotlessJava {
  // other configurations
  dependsOn tasks.named( "compileTestModule" )
}

/**
 * Test Task Customizations
 */
test {
	useJUnitPlatform()
	testLogging {
		showStandardStreams = true
	}
	dependsOn compileJava, compileTestModule, compileTestJava
	classpath += files( "./modules" )
	//exclude '**/resources/**'
}

/**
 * Bump the major version number
 */
task bumpMajorVersion {
	doLast{
		bumpVersion( true )
	}
}

/**
 * Bump the minor version number
 */
task bumpMinorVersion {
	doLast{
		bumpVersion( false, true )
	}
}

/**
 * Bump the patch version number
 */
task bumpPatchVersion {
	doLast{
		bumpVersion( false, false, true )
	}
}

/**
 * Utility to copy dependencies to build/dependencies
 * Useful for testing and deebugging
 */
task getDependencies( type: Copy ) {
  from sourceSets.main.runtimeClasspath
  into 'build/dependencies/'
}

task compileAllBoxLangModules {
	doLast {
		new File( "./modules" ).listFiles().each {
			if ( it.isDirectory() && new File( it, 'build.gradle' ).exists() ) {
				triggerBoxLangModuleTask( it.getName(), it.toString() + "/build.gradle", [ 'shadow' ] )
			}
		}
	}
}

task cleanAllBoxLangModules {
	doLast {
		new File( "./modules" ).listFiles().each {
			if ( it.isDirectory() && new File( it, 'build.gradle' ).exists()) {
				triggerBoxLangModuleTask( it.getName(), it.toString() + "/build.gradle", [ 'clean' ] )
			}
		}
	}
}

def triggerBoxLangModuleTask( projectName, relativeBuildFilePath, tasksToTrigger ) {
	def taskName = "trigger${projectName}"
	def task = tasks.findByName( taskName )

	// If task not defined, then create it
	if ( task == null ) {
		task = tasks.create( taskName, GradleBuild ) {
			buildFile = relativeBuildFilePath
			tasks = tasksToTrigger
		}
	}

	task.build()
}

/**
 * Custom tasks to run in the `build` task lifecycle
 * It's last due to groovy being dump and not reading the order of the tasks
 */
build.dependsOn compileAllBoxLangModules
clean.dependsOn cleanAllBoxLangModules
