// https://docs.gradle.org/current/userguide/building_java_projects.html#sec:java_packaging
plugins {
    id 'java'
	// https://github.com/harbby/gradle-serviceloader
    id "com.github.harbby.gradle.serviceloader" version "1.1.8"
	// https://github.com/johnrengelman/shadow
	id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = '1.0.0'
sourceCompatibility = jdkVersion
targetCompatibility = jdkVersion

repositories {
    mavenCentral()
}

dependencies {
	// Add also the root runtime dependencies
	compileOnly project( ':' )
	compileOnly 'org.slf4j:slf4j-api:2.0.12'

    // Testing Dependencies
	testImplementation project( ':' )
    testImplementation "org.junit.jupiter:junit-jupiter:5.+"
	testImplementation "org.mockito:mockito-core:5.+"
	testImplementation "com.google.truth:truth:1.+"
}

compileJava {
	// Compiler Options
	options.incremental = true
	options.encoding = 'UTF-8'
	options.debug()
}

compileTestJava{
	// Make sure the service loaders are created before testing
	dependsOn compileJava, serviceLoaderBuild
}

javadoc {
    // To avoid our own doclet issues
	options.addBooleanOption( "Xdoclint:none", true )
	//exclude '**/boxlang/parser/**'
	options.addBooleanOption( 'html5', true )
}

/**
 * Docs are here:
 * - https://github.com/harbby/gradle-serviceloader,
 * - https://plugins.gradle.org/plugin/com.github.harbby.gradle.serviceloader
 * This generates the META-INF/services files for the ServiceLoader as part of the `build` task
 */
serviceLoader {
    serviceInterface 'ortus.boxlang.runtime.bifs.BIF'
    serviceInterface 'ortus.boxlang.runtime.components.Component'
    serviceInterface 'ortus.boxlang.runtime.async.tasks.IScheduler'
    serviceInterface 'ortus.boxlang.runtime.cache.providers.ICacheProvider'
	serviceInterface 'ortus.boxlang.runtime.events.IInterceptor'
}

jar {
    archiveVersion =  "${version}"
 	manifest {
	   attributes 'Description': 'Test Module'
    }
}
shadowJar {
    mergeServiceFiles()
    destinationDirectory = file( "build/libs" )
}
build.finalizedBy( shadowJar )

/**
 * Custom task that creates a build/module folders
 * - Copies the build/libs/BoxLangModuleTemplate-1.0.0-all.jar to build/module/libs/BoxLangModuleTemplate-1.0.0-all.jar
 * - Copies the src/main/bx/** to build/module/ folder.
 */
task createModuleStructure( type: Copy ) {
	dependsOn( shadowJar )
    from( 'build/libs' ) {
		include "${project.name}-${version}-all.jar"
        into 'libs'
    }
	from( 'src/libs' ){
		include '**/*.jar'
		into 'libs'
	}
    from( 'src/main/bx' ) {
		include '**/*.bx'
		include '**/*.cfc'
    }
	from( '.' ) {
        include 'box.json'
	}
    destinationDir = file( 'build/module' )
}
// Copy to the output folder
task copyTestModuleToCore( type: Copy ) {
	dependsOn createModuleStructure
	from( 'build/module' )
	into '../../../modules/test'
}
shadowJar.finalizedBy( createModuleStructure, copyTestModuleToCore )

clean{
	// Delete the ../../../modules/test directory
	delete '../../../modules/test'
}

test {
    useJUnitPlatform()
    testLogging {
		showStandardStreams = true
	}
}
