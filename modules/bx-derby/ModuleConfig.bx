/**
 * This is the module descriptor and entry point for your module in the Runtime.
 * The unique name of the moduel is the name of the directory on the modules folder.
 * A BoxLang Mapping will be created for you with the name of the module.
 *
 * A Module can have the following folders that will be automatically registered:
 * + bifs - Custom BIFs that will be registered into the runtime
 * + interceptors - Custom Interceptors that will be registered into the runtime via the configure() method
 * + libs - Custom Java libraries that your module leverages
 * + tags - Custom tags that will be registered into the runtime
 *
 * Every Module will have it's own ClassLoader that will be used to load the module libs and dependencies.
 */
class{

	/**
	 * --------------------------------------------------------------------------
	 * Module Properties
	 * --------------------------------------------------------------------------
	 * Here is where you define the properties of your module that the module service
	 * will use to register and activate your module
	 */

	/**
	 * Your module version. Try to use semantic versioning
	 * @mandatory
	 */
	this.version = "1.0.0";

	/**
	 * The BoxLang mapping for your module.  All BoxLang modules are registered with an internal
	 * mapping prefix of : bxModules.{this.mapping}, /bxmodules/{this.mapping}. Ex: bxModules.test, /bxmodules/test
	 */
	this.mapping = "derby";

	/**
	 * Who built the module
	 */
	this.author = "Michael Born";

	/**
	 * The module description
	 */
	this.description = "Provides the Apache Derby embedded database and JDBC driver for connectivity.";

	/**
	 * The module web URL
	 */
	this.webURL = "https://www.ortussolutions.com";

	/**
	 * This boolean flag tells the module service to skip the module registration/activation process.
	 */
	this.disabled = false;

	/**
	 * --------------------------------------------------------------------------
	 * Module Methods
	 * --------------------------------------------------------------------------
	 */

	/**
	 * Called by the ModuleService on module registration
	 *
	 * @runtime - The Runtime instance
	 */
	function configure( runtime ){
		/**
		 * Every module has a settings configuration object
		 */
		settings = {
		};

		/**
		 * The module interceptors to register into the runtime
		 */
		interceptors = [
		];

		/**
		 * A list of custom interception points to register into the runtime
		 */
		customInterceptionPoints = [  ];
	}

	/**
	 * Called by the ModuleService on module activation
	 *
	 * @runtime - The Runtime instance
	 */
	function onLoad( runtime ){
	}

	/**
	 * Called by the ModuleService on module deactivation
	 *
	 * @runtime - The Runtime instance
	 */
	function onUnload( runtime ){

	}

	/**
	 * --------------------------------------------------------------------------
	 * Module Events
	 * --------------------------------------------------------------------------
	 * You can listen to any Runtime events by creating the methods
	 * that match the approved Runtime Interception Points
	 */
}
